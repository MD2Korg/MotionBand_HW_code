/* This file was generated by plugin 'Nordic Semiconductor nRF5x v.1.2.2' (BDS version 1.0.2116.0) */

#ifndef BLE_MOTION_SERVICE_H__
#define BLE_MOTION_SERVICE_H__

#include <stdint.h>
#include <stdbool.h>
#include "ble.h"
#include "ble_srv_common.h"
#include "app_util_bds.h"



/**@brief MOTION SERVICE event type. */
typedef enum
{ 
    BLE_MOTION_SERVICE_MOTION_DATA_EVT_NOTIFICATION_ENABLED,  /**< Motion Data value notification enabled event. */
    BLE_MOTION_SERVICE_MOTION_DATA_EVT_NOTIFICATION_DISABLED, /**< Motion Data value notification disabled event. */
    BLE_MOTION_SERVICE_MOTION_DATA_EVT_CCCD_WRITE, /**< Motion Data CCCD write event. */
} ble_motion_service_evt_type_t;

// Forward declaration of the ble_motion_service_t type.
typedef struct ble_motion_service_s ble_motion_service_t;








/**@brief Motion Data structure. */
typedef struct
{
    uint8_array_t accel;
    uint8_array_t gyro1;
    uint8_array_t gyro2;
    uint16_t counter;
} ble_motion_service_motion_data_t;

/**@brief MOTION SERVICE Service event. */
typedef struct
{
    ble_motion_service_evt_type_t evt_type;    /**< Type of event. */
    union {
        uint16_t cccd_value; /**< Holds decoded data in Notify and Indicate event handler. */
    } params;
} ble_motion_service_evt_t;

/**@brief MOTION SERVICE Service event handler type. */
typedef void (*ble_motion_service_evt_handler_t) (ble_motion_service_t * p_motion_service, ble_motion_service_evt_t * p_evt);

/**@brief MOTION SERVICE Service init structure. This contains all options and data needed for initialization of the service */
typedef struct
{
    ble_motion_service_evt_handler_t     evt_handler; /**< Event handler to be called for handling events in the MOTION SERVICE Service. */
    ble_motion_service_motion_data_t ble_motion_service_motion_data_initial_value; /**< If not NULL, initial value of the Motion Data characteristic. */ 
} ble_motion_service_init_t;

/**@brief MOTION SERVICE Service structure. This contains various status information for the service.*/
struct ble_motion_service_s
{
    ble_motion_service_evt_handler_t evt_handler; /**< Event handler to be called for handling events in the MOTION SERVICE Service. */
    uint16_t service_handle; /**< Handle of MOTION SERVICE Service (as provided by the BLE stack). */
    ble_gatts_char_handles_t motion_data_handles; /**< Handles related to the Motion Data characteristic. */
    uint16_t conn_handle; /**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). */
};

/**@brief Function for initializing the MOTION SERVICE.
 *
 * @param[out]  p_motion_service       MOTION SERVICE Service structure. This structure will have to be supplied by
 *                          the application. It will be initialized by this function, and will later
 *                          be used to identify this particular service instance.
 * @param[in]   p_motion_service_init  Information needed to initialize the service.
 *
 * @return      NRF_SUCCESS on successful initialization of service, otherwise an error code.
 */
uint32_t ble_motion_service_init(ble_motion_service_t * p_motion_service, const ble_motion_service_init_t * p_motion_service_init);

/**@brief Function for handling the Application's BLE Stack events.*/
void ble_motion_service_on_ble_evt(ble_motion_service_t * p_motion_service, ble_evt_t * p_ble_evt);

/**@brief Function for sending the Motion Data.
 *
 * @details The application calls this function after having performed a motion data.
 *          The motion data data is encoded and sent to the client.
 *          This function is only generated if the characteristic's Notify or Indicate property is not 'Excluded'.
 *
 * @param[in]   p_motion_service                    MOTION SERVICE Service structure.
 * @param[in]   p_motion_data               New motion data.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_motion_service_motion_data_send(ble_motion_service_t * p_motion_service, ble_motion_service_motion_data_t * p_motion_data);

#endif //_BLE_MOTION_SERVICE_H__
